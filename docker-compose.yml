# Docker Compose file for defining the services (i.e. containers) in the Bucket list app. We define a service for the api/app code and another for the postgres DB.
services:
  buckets-api:
    build:
      context: .
    env_file: .env
    depends_on:
      migrate: # wait for the db migrations to be setup before starting the api service else the DB would have no tables and any requests to the API would return an error as there's no table on which to perform CRUD ops.
        condition: service_completed_successfully
    ports:
      - 8080:8080 # Specify a connection from/expose the container's 8080 port to the host's 8080 port.

  migrate:
    image: migrate/migrate
    volumes:
      - ./pkg/db/migrations:/migrations
    command: ["-path", "/migrations", "-database", "postgres://postgres:buck@postgres-db:5432/buckets_db?sslmode=disable", "up"]
    depends_on:
      postgres-db: # wait for the db to be started and running properly before starting the migrate service else running migrations would fail.
        condition: service_healthy

  postgres-db:
    image: postgres # TODO: Set the network "buckets_default" for the db service so that the api service can connect to the db service as they have to be on the same network to connect.
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - .env # NB: Do not create an environment variable for a separate user. Instead use the image's default user, postgres and provide enviroment variables for the DB name and password.
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

volumes:
  postgres-data:
